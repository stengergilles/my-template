apply plugin: 'com.android.application'

task refactorPackage {
    description = 'Refactors the package name in source files and moves them to the correct directory.'
    group = 'custom'

    doLast {
        def javaDir = file("src/main/java")
        def mainActivityFile = fileTree(javaDir).include('**/MainActivity.java').singleFile
        def currentPackageName = ""

        if (mainActivityFile.exists()) {
            def content = mainActivityFile.getText('UTF-8')
            def matcher = content =~ /^package\s+([a-zA-Z0-9_.]+);/
            if (matcher.find()) {
                currentPackageName = matcher.group(1)
            } else {
                throw new GradleException("Could not find package declaration in MainActivity.java")
            }
        } else {
            throw new GradleException("MainActivity.java not found in $javaDir")
        }

        def newPackageName = android.defaultConfig.applicationId

        if (currentPackageName == newPackageName) {
            println "Package name is already set to $newPackageName. No refactoring needed."
            return
        }

        println "Refactoring package name from $currentPackageName to $newPackageName"

        // 1. Update Java files
        def oldPackagePath = currentPackageName.replace('.', '/')
        def newPackagePath = newPackageName.replace('.', '/')
        def oldJavaPath = file("$javaDir/$oldPackagePath")
        def newJavaPath = file("$javaDir/$newPackagePath")

        if (oldJavaPath.exists()) {
            println "Moving Java files from $oldJavaPath to $newJavaPath"
            newJavaPath.mkdirs()
            ant.move(file: "$oldJavaPath", tofile: "$newJavaPath")

            // Update package declarations in Java files
            fileTree(newJavaPath).include('**/*.java').each { file ->
                println "Updating package in $file"
                def content = file.getText('UTF-8')
                content = content.replace("package $currentPackageName", "package $newPackageName")
                file.write(content, 'UTF-8')
            }
        }

        // 2. Update C++ JNI files
        def jniBridgeFile = file("../../src/platform/android/jni_bridge.cpp")
        if (jniBridgeFile.exists()) {
            println "Updating package name in $jniBridgeFile"
            def content = jniBridgeFile.getText('UTF-8')
            content = content.replaceAll(currentPackageName.replace('.', '_'), newPackageName.replace('.', '_'))
            content = content.replaceAll(currentPackageName.replace('.', '/'), newPackageName.replace('.', '/'))
            jniBridgeFile.write(content, 'UTF-8')
        }

        def keyboardHelperFile = file("../../src/platform/android/keyboard_helper.cpp")
        if (keyboardHelperFile.exists()) {
            println "Updating package name in $keyboardHelperFile"
            def content = keyboardHelperFile.getText('UTF-8')
            content = content.replaceAll(currentPackageName.replace('.', '/'), newPackageName.replace('.', '/'))
            keyboardHelperFile.write(content, 'UTF-8')
        }

        println "Package refactoring complete."
    }
}

project.afterEvaluate {
    preBuild.dependsOn refactorPackage
}

android {
    def packageName = project.hasProperty('overridePackageName') ? project.properties['overridePackageName'] : (project.hasProperty('packageName') ? project.properties['packageName'] : 'com.example.imguihelloworld')
    println "Resolved packageName: $packageName"
    namespace packageName

    
    compileSdkVersion 33
    defaultConfig {
        applicationId packageName
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                arguments "-DANDROID=ON -DCMAKE_VERBOSE_MAKEFILE=ON"
            }
        }
        ndk {
            abiFilters 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
            version "3.25.1"
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '26.1.10909125'
}


task updateAppTitle {
    description = 'Updates the app title in strings.xml.'
    group = 'custom'

    doLast {
        if (project.hasProperty('overrideAppTitle')) {
            def appTitle = project.properties['overrideAppTitle']
            def stringsXml = file("src/main/res/values/strings.xml")
            if (stringsXml.exists()) {
                def content = stringsXml.getText('UTF-8')
                def newContent = content.substring(0, content.indexOf("<string name=\"app_name\">") + "<string name=\"app_name\">".length()) + appTitle + content.substring(content.indexOf("</string>", content.indexOf("<string name=\"app_name\">")));
                stringsXml.write(newContent, 'UTF-8')
                println "Updated app_name in strings.xml to: $appTitle"
            } else {
                println "strings.xml not found, skipping app title update."
            }
        } else {
            println "No overrideAppTitle property found, skipping app title update."
        }
    }
}

project.afterEvaluate {
    preBuild.dependsOn updateAppTitle
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.10"))
    implementation("androidx.core:core-ktx:1.10.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
}


task copyFonts(type: Copy) {
    from fileTree("../../external/imgui/misc/fonts") {
        include "*.ttf"
    }
    into "src/main/assets"
    println "Copying fonts from ../../external/imgui/misc/fonts to src/main/assets"
}

preBuild.dependsOn copyFonts

apply from: 'openssl.gradle'


