
from abc import ABC, abstractmethod
import pandas as pd
from typing import Dict

class Indicator(ABC):
    """
    Abstract base class for technical indicators.
    """
    REQUIRED_COLUMNS = ['Open', 'High', 'Low', 'Close'] # Volume might be optional for some

    def __init__(self, df: pd.DataFrame):
        """
        Initializes the Indicator with an OHLCV DataFrame.

        Args:
            df: A pandas DataFrame with 'Open', 'High', 'Low', 'Close', and optionally 'Volume' columns.
                It's assumed that the DataFrame's index is a DateTimeIndex.
        
        Raises:
            ValueError: If the DataFrame is not valid or missing required columns.
        """



        self._validate_ohlcv(df)
        self.df = df.copy() # Work on a copy to avoid modifying the original DataFrame outside the class
        self.signal_orientations: dict[str, str] = {} # Initialize common attribute

    def _validate_ohlcv(self, df: pd.DataFrame):
        """
        Validates the input DataFrame for required OHLC columns.        """
        if not isinstance(df, pd.DataFrame):
            raise ValueError("Input must be a pandas DataFrame.")
        if df.empty:
            raise ValueError("Input DataFrame cannot be empty.")
        
        missing_cols = [col for col in self.REQUIRED_COLUMNS if col not in df.columns]
        if missing_cols:
            raise ValueError(f"DataFrame is missing required OHLC columns: {', '.join(missing_cols)}")

        # Optional: Check for DateTimeIndex
        if not isinstance(df.index, pd.DatetimeIndex):
            print("Warning: DataFrame index is not a DatetimeIndex. Time-based operations might be affected.")


    @abstractmethod
    def calculate(self) -> pd.DataFrame:
        """
        Calculates the indicator and adds its values as new columns to the DataFrame.
        This method should modify self.df and return it.


        Returns:            The DataFrame with added indicator columns.
        """
        pass

    def get_signal_orientations(self) -> Dict[str, str]: # Changed to use Dict        
        """
        Returns the dictionary mapping signal column names generated by this indicator
        to their orientation ('buy' or 'sell').
        Subclasses should populate self.signal_orientations in their __init__.
        """        
        return self.signal_orientations


    def get_data(self) -> pd.DataFrame:
        """        Returns the DataFrame with calculated indicators.
        """
        return self.df